---
# tasks file for controller
- name: change hostname
  shell: sudo hostname controller1


- name: make directory
  file:
    path: "{{ item }}"
    state: directory
  with_items: [ '/var/lib/kubernetes' ]
  become: yes

- name: cp files to the path
  copy:
    src: "{{ item }}"
    dest: /var/lib/kubernetes/
  become: yes
  with_items: 
    - 'bootstrap/token.csv'
    - 'ssl/ca.pem'
    - 'ssl/ca-key.pem'
    - 'ssl/admin.pem'
    - 'ssl/admin-key.pem'
    - 'ssl/kube-proxy.pem'
    - 'ssl/kube-proxy-key.pem'
    - 'ssl/kubernetes.pem'
    - 'ssl/kubernetes-key.pem'

- name: check kube-apiserver binary existence
  stat:
    path: /usr/bin/kube-apiserver
  register: kube_existence

- name: dowload api-server, controller-manager, scheduler binary files 
  get_url:
    url: "{{ item }}"
    dest: /usr/bin/
    mode: +x
  become: yes
  with_items:
    - 'https://storage.googleapis.com/kubernetes-release/release/v1.7.0/bin/linux/amd64/kube-apiserver'
    - 'https://storage.googleapis.com/kubernetes-release/release/v1.7.0/bin/linux/amd64/kube-controller-manager'
    - 'https://storage.googleapis.com/kubernetes-release/release/v1.7.0/bin/linux/amd64/kube-scheduler'
  when: not kube_existence.stat.exists

- name: add systemd unit file
  template:
    src: "{{ item.src }}"
    dest: /etc/systemd/system/{{ item.dst }}
  become: yes
  with_items:
      - { src: 'kube-apiserver.service.j2', dst: 'kube-apiserver.service' }
      - { src: 'kube-controller-manager.service.j2', dst: 'kube-controller-manager.service' }
      - { src: 'kube-scheduler.service.j2', dst: 'kube-scheduler.service' }


- name: start kube-apiserver, kube-controller-manager, kube-scheduler progresses
  systemd:
    name: "{{ item }}"
    daemon_reload: yes
    state: restarted
    enabled: yes
  become: yes
  with_items: [ 'kube-apiserver', 'kube-controller-manager', 'kube-scheduler' ]


- name: wait for apiserver process start running
  pause: seconds=10


- name: create rolebinding
  shell: |
      kubectl create clusterrolebinding kubelet-bootstrap \
        --clusterrole=system:node-bootstrapper \
        --user=kubelet-bootstrap
  become: yes
  register: command_result
  retries: 5
  delay: 10
  until: command_result|succeeded
  # ignore_errors: yes
  # until: command_result.stdout.find("created") != -1


- name: check cidr config on etcd
  shell: |
      sudo etcdctl \
        --ca-file=/etc/etcd/ca.pem \
        --cert-file=/etc/etcd/kubernetes.pem \
        --key-file=/etc/etcd/kubernetes-key.pem \
        get /coreos.com/network/config
  ignore_errors: yes
  register: cidr_etcd


- name: put cidr config to etcd
  shell: |
      sudo etcdctl \
        --ca-file=/etc/etcd/ca.pem \
        --cert-file=/etc/etcd/kubernetes.pem \
        --key-file=/etc/etcd/kubernetes-key.pem \
        set /coreos.com/network/config '{ "Network": "10.200.0.0/16", "Backend": {"Type": "vxlan"}}'
  when: cidr_etcd|failed


- name: cp approve_csr.sh to the target 
  copy:
    src: approve_csr.sh
    dest: ~/
    mode: +x

- name: start a background shell script to aprove CSR
  shell: nohup ~/approve_csr.sh &
  args:
    creates: ~/nohup.out

