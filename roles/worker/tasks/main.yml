---
# tasks file for worker

- name: insert hosts to /etc/hosts
  blockinfile:
    path: /etc/hosts
    block: |
      {% for node in K8S_NODES %}
      {{ node.ip }} {{ node.hostname }}
      {% endfor %}
  become: yes

- debug:
    msg: "node_id={{ node_ip }}, node_name={{ node_name }}"

- name: set hostname
  shell: sudo hostname {{ node_name }}

- name: change hostname in /etc/hostname
  template:
    src: hostname.j2
    dest: /etc/hostname
  become: yes
      
  
- name: make directory
  file:
    path: "{{ item }}"
    state: directory
  become: yes
  with_items:
    - '/var/run/kubernetes'
    - '/var/lib/kubelet'
    - '/var/lib/kube-proxy'
    - '/var/lib/kubernetes'
    - '/opt/cni'
    - '/opt/cni/bin/'

- name: cp files to the path
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dst }}"
  become: yes
  with_items: 
    - { src: 'bootstrap/bootstrap.kubeconfig', dst: '/var/lib/kubelet/' }
    - { src: 'bootstrap/kube-proxy.kubeconfig', dst: '/var/lib/kube-proxy' }
    - { src: 'ssl/ca.pem', dst: '/var/lib/kubernetes/' }
    - { src: "ssl/kubelet{{ node_name[-1] }}.pem", dst: '/var/lib/kubelet/kubelet.pem' }
    - { src: "ssl/kubelet-key{{ node_name[-1] }}.pem", dst: '/var/lib/kubelet/kubelet-key.pem' }


- name: check docker binary existence
  stat:
    path: /usr/bin/docker
  register: docker_existence

- name: get docker and cni binary files
  unarchive:
    src: "{{ item.src }}"
    dest: "{{ item.dst }}"
    remote_src: yes
    extra_opts: [--strip-components=1]
  become: yes
  when: not docker_existence.stat.exists
  with_items:
    - { src: 'https://get.docker.com/builds/Linux/x86_64/docker-1.12.6.tgz', dst: '/usr/bin/' }
    - { src: 'https://storage.googleapis.com/kubernetes-release/network-plugins/cni-amd64-0799f5732f2a11b329d9e3d51b9c8f2e3759f2ff.tar.gz', dst: '/opt/cni/bin/' }


- name: check kube component binary existence
  stat:
    path: /usr/bin/kubelet
  register: kube_existence

- name: dowload kubelet, kube-proxy
  get_url:
    url: "{{ item }}"
    dest: /usr/bin/
    mode: +x
  become: yes
  with_items:
    - 'https://storage.googleapis.com/kubernetes-release/release/v1.6.1/bin/linux/amd64/kube-proxy'
    - 'https://storage.googleapis.com/kubernetes-release/release/v1.6.1/bin/linux/amd64/kubelet'
  when: not kube_existence.stat.exists


- name: get api server ip address
  shell: "sudo cat /var/lib/kubelet/bootstrap.kubeconfig | grep server | cut -d ':' -f2,3,4 | tr -d '[:space:]'"
  register: api_servers

- name: add docker, kubelet, kube-proxy systemd unit file
  template:
    src: "{{ item.src }}"
    dest: /etc/systemd/system/{{ item.dst }}
  become: yes
  with_items:
      - { src: 'docker.service.j2', dst: 'docker.service' }
      - { src: 'kubelet.service.j2', dst: 'kubelet.service' }
      - { src: 'kube-proxy.service.j2', dst: 'kube-proxy.service' }


- name: start kube-proxy processes
  systemd:
    name: "{{ item }}"
    daemon_reload: yes
    state: restarted
    enabled: yes
  become: yes
  with_items: [ 'kube-proxy' ]


# setup flannel
  
- name: make directory
  file:
    path: "{{ item }}"
    state: directory
  become: yes
  with_items:
    - '/etc/kubernetes/ssl'
    - '/etc/systemd/system/docker.service.d'
    - '/etc/kubernetes/cni/'
    - '/etc/kubernetes/cni/net.d/'


- name: cp kubernetes-key.pem kubernetes.pem ca.pem to the path
    
  copy:
    src: "ssl/{{ item }}"
    dest: /etc/kubernetes/ssl 
  become: yes
  with_items: 
    - kubernetes-key.pem 
    - kubernetes.pem 
    - ca.pem


- name: check existence of flannl binary files
  stat:
    path: /usr/bin/flanneld
  register: flannel_existence


- name: dowload flannel binary files
  get_url:
    url: https://github.com/coreos/flannel/releases/download/v0.8.0/flanneld-amd64 
    dest: /usr/bin/flanneld
    mode: +x
  become: yes
  when: not flannel_existence.stat.exists

- name: add flanneld config files
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dst }}"
  become: yes
  with_items:
      - { src: '40-flannel.conf.j2', dst: '/etc/systemd/system/docker.service.d/40-flannel.conf' }
      - { src: 'docker_opts_cni.env.j2', dst: '/etc/kubernetes/cni/docker_opts_cni.env' }
      - { src: '10-flannel.conf.j2', dst: '/etc/kubernetes/cni/net.d/10-flannel.conf' }


- name: add flanneld unit file
  template:
    src: "{{ item.src }}"
    dest: /etc/systemd/system/{{ item.dst }}
  become: yes
  with_items:
      - { src: 'flanneld.service.j2', dst: 'flanneld.service' }


- name: start flanneld, docker, kubelet, processes
  systemd:
    name: "{{ item }}"
    daemon_reload: yes
    state: restarted
    enabled: yes
  become: yes
  with_items: [ 'flanneld', 'docker', 'kubelet', ]
  register: start_services


# - name: reboot system
#   shell: /sbin/shutdown -r +1
#   become: yes
#   async: 0
#   poll: 0
#   when: start_services|succeeded
